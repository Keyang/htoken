#!/usr/bin/env node

var fs = require("fs");
var home = (process.env.HOME || process.env.USERPROFILE);
var cfg = home + "/.rhtoken.json";
var read = require("read");
var url = require("url");
var hotp = require("../auth.js");
var crypto = require("crypto");
var Buffer = require("buffer").Buffer;
var alg = "aes256";

function checkCfg(cb) {
  if (!fs.existsSync(cfg)) {
    console.log("Config file not found at %s", cfg);
    console.log("Create config file.");
    initCfg();
  } else {
    cb();
  }
}

function initCfg(cb) {
  var obj = {
    url: "",
    counter: 0,
    key: "",
    "length": 6
  };
  read({
    "prompt": "Enter the oauth link (The link in QR code):"
  }, function(err, d) {
    obj.url = d;
    var query = url.parse(unescape(d)).query;
    var qArr = query.split("&");
    for (var i = 0; i < qArr.length; i++) {
      var o = qArr[i];
      var key = o.split("=")[0];
      var val = o.split("=")[1];
      if (key.toLowerCase() === "secret") {
        obj.key = val;
      }
      if (key.toLowerCase() ==="counter"){
        obj.counter=parseInt(val);
      }
    }
    if (obj.key === "") {
      console.log("Secrekey not found in url: %s", d);
      process.exit(1);
    }
    read({
      "prompt": "Enter the passcode length (6 is default):"
    }, function(err, d) {
      if (d && isNumber(d)) {
        obj.length = parseInt(d);
      }
      read({
        "prompt": "Enter password to protect your key (Enter to leave it empty): ",
        "silent": true
      }, function(err, d) {
        storeAndEncrypt(obj,d);
        console.log("Config setup successfully. Run htoken again to get the token.");
      });
    });

  });
}

function encrypt(data, pwd) {
  var enc = crypto.createCipher(alg, pwd);
  var buf = enc.update(data);
  buf = Buffer.concat([buf, enc.final()]);
  return buf;
}

function decrypt(buf, pwd) {
  try {
    var dec = crypto.createDecipher(alg, pwd);
    var oBuf = dec.update(buf);
    oBuf = Buffer.concat([oBuf, dec.final()]);
    return oBuf.toString("utf8");
  } catch (e) {
    console.log("Decryption error. Possibly password incorrect.");
    console.error(e.stack);
    process.exit(1);
  }
}

function run() {
  var cfgO = {};
  var data = fs.readFileSync(cfg);
  try {
    cfgO = JSON.parse(data.toString("utf8"));
    rollToken(cfgO);
  } catch (e) {
    read({
      "prompt": "Enter password: ",
      "silent": true
    }, function(err, d) {
      data = JSON.parse(decrypt(data, d));
      rollToken(data,d);
    });
  }
}

function storeAndEncrypt(data, pwd) {
  if (typeof data === "object"){
    data = JSON.stringify(data, null, 2);
  }
  if (pwd && pwd.length > 0) {
    data = encrypt(data, pwd);
  }
  fs.writeFileSync(cfg, data);
}

function rollToken(cfgData, pwd) {
  console.log(hotp(cfgData.key, cfgData.counter, cfgData.length));
  cfgData.counter++;
  storeAndEncrypt(cfgData,pwd);
}
checkCfg(function() {
  run();
});
